}
all_genes_test_full_info
all_genes_test_full_info %>% lapply(nrow())
all_genes_test_full_info %>% lapply(nrow
all_genes_test_full_info %>% lapply(nrow)
all_genes_test_full_info %>% lapply(nrow)
# load data
g_counts_raw <- readRDS("../data-raw/salmon.merged.gene_counts.rds")
rna_counts_all <- g_counts_raw %>% assays() %>% .$counts
# fix sample IDS in count matrix
colnames(rna_counts_all) <-
sub(pattern = "X[0-9]{4}_", replacement = "", x = colnames(rna_counts_all)) %>%
sub(pattern = "_S[0-9]{1,2}", replacement = "", x=.)
# fix sample IDS in meta data sheet
meta_data_sheet <- readxl::read_excel("0177_metadata.xlsx") %>%
transmute(`Sample.ID`=sub(pattern = ".....", replacement = "", x=`Sample ID (Library ID)`),
gRNA = factor(gsub(x = Condition1, pattern = "g|gRNA_", replacement = ""), levels=c("EV", "PTPRK", "PHOX2B")),
2+2
Media = factor(gsub(x = Condition2, pattern = "_media", replacement = ""), levels=c("proliferation","differentiation")),
Extraction=factor(`Extraction pool (A,B,C)`, levels=c("A", "B", "C", "D", "E")),
2+2
y
fit
all_genes_test_full_info
all_genes_test_full_info$PHOX2B_vs_EV_proliferation
not_sig <- rownames(all_genes_test_full_info)[which(all_genes_test_full_info$PValue > .1)]
not_sig
which(all_genes_test_full_info$PValue > .1)
all_genes_test_full_info$PValue
all_genes_test_full_info
not_sig <- rownames(all_genes_test_full_info)[which(all_genes_test_full_info$PHOX2B_vs_EV_proliferation$PValue > .1)]
not_sig
which(all_genes_test_full_info$PHOX2B_vs_EV_proliferation$PValue > .1)
not_sig <- rownames(all_genes_test_full_info$PHOX2B_vs_EV_proliferation)[which(all_genes_test_full_info$PHOX2B_vs_EV_proliferation$PValue > .1)]
not_sig
set
rownames(set)
not_sig <- (all_genes_test_full_info$PHOX2B_vs_EV_proliferation)[which(all_genes_test_full_info$PHOX2B_vs_EV_proliferation$PValue > .1)])$ENSEMBL
not_sig <- (all_genes_test_full_info$PHOX2B_vs_EV_proliferation)[which(all_genes_test_full_info$PHOX2B_vs_EV_proliferation$PValue > .1)]$ENSEMBL
not_sig
empirical <- rownames(set)[ rownames(set) %in% not_sig ]
emperical
empirical
set <- RUVg(set, empirical, k=5)
set
pdat <- pData(set)
pdat
annotation_col_df <-  dplyr::select(meta_data_sheet, gRNA, Extraction)
rownames(annotation_col_df) <- meta_data_sheet$Sample.ID
annotation_row_df <-  dplyr::select(meta_data_sheet, Media)
rownames(annotation_row_df) <- meta_data_sheet$Sample.ID
plot_sample_heatmap(log_cpm,
method="MDS",
labels_col = meta_data_sheet$Sample.ID,
labels_row = meta_data_sheet$Sample.ID,
annotation_col = annotation_col_df[c("gRNA", "Extraction")],
annotation_row = annotation_row_df["Media"],
display_numbers=T,
fontsize_number=6,
main="Multiple dimensional scaling (MDS) heatmap"
)
ggplot_mds(y = y,
dim_plot = c(1,2),
size=1,
colour_by = y$samples$Media) +
ggtitle("MDS-plot colored by Media (Dimensions 1 & 2)") +
aes(label = rownames(y$samples)) +
geom_label_repel()
ggplot_mds(y = y,
dim_plot = c(3,4),
size=1,
colour_by = y$samples$Media) +
ggtitle("MDS-plot colored by Media (Dimensions 3 & 4)") +
aes(label = rownames(y$samples)) +
geom_label_repel()
ggplot_mds(y = y,
dim_plot = c(1,2),
colour_by = y$samples$gRNA,
size=1) +
ggtitle("MDS-plot colored by gRNA") +
aes(label = rownames(y$samples)) +
geom_label_repel()
y$samples
pdat
y$samples
y$samples <- cbindy$samples, pdat)
y$samples <- cbind(y$samples, pdat)
y$samples
ggplot_mds(y = y,
dim_plot = c(1,2),
colour_by = y$samples$W_1,
size=1) +
ggtitle("MDS-plot colored by gRNA") +
aes(label = rownames(y$samples)) +
geom_label_repel()
ggplot_mds(y = y,
dim_plot = c(1,2),
colour_by = y$samples$W_2,
size=1) +
ggtitle("MDS-plot colored by W2")
ggplot_mds(y = y,
dim_plot = c(1,2),
colour_by = y$samples$W_1,
size=2) +
ggtitle("MDS-plot colored by W1")
ggplot_mds(y = y,
dim_plot = c(1,2),
colour_by = y$samples$W_1,
size=5) +
ggtitle("MDS-plot colored by W1")
ggplot_mds(y = y,
dim_plot = c(1,2),
colour_by = y$samples$W_2,
size=5) +
ggtitle("MDS-plot colored by W2")
design
design <- model.matrix(~group + W_1 + W_2 + W_3 + W_4 + W_5, data=y$samples)
design
design <- model.matrix(~0 + group + W_1 + W_2 + W_3 + W_4 + W_5, data=y$samples)
design
y <- estimateDisp(y, design = design)
y <- calcNormFactors(y)
design <- model.matrix(~0 + group + W_1 + W_2 + W_3 + W_4 + W_5, data=y$samples)
y <- estimateDisp(y, design = design)
y <- estimateDisp(y, design = design)
fit <- glmQLFit(y, design = y$design, robust = TRUE)
fit
all_genes_test_full_info <- list()
for (contrast in colnames(contrast_matrix)) {
all_genes_test <- edgeR_tester(contrast_matrix = contrast_matrix, contrast=contrast, efit = fit)
all_genes_test_full_info[[contrast]] <-  merge(x=all_genes_test,
y=gene_info_list,
by.x = "ENSEMBL", by.y="ensembl_gene_id",
all.x=T)
}
contrast_matrix <- makeContrasts(PHOX2B_vs_EV_proliferation=groupPHOX2Bproliferation-groupEVproliferation,
PTPRK_vs_EV_proliferation=groupPTPRKproliferation-groupEVproliferation,
PHOX2B_vs_EV_differentiation=groupPHOX2Bdifferentiation-groupEVdifferentiation,
PTPRK_vs_EV_differentiation=groupPTPRKdifferentiation-groupEVdifferentiation,
levels=design)
all_genes_test_full_info <- list()
for (contrast in colnames(contrast_matrix)) {
all_genes_test <- edgeR_tester(contrast_matrix = contrast_matrix, contrast=contrast, efit = fit)
all_genes_test_full_info[[contrast]] <-  merge(x=all_genes_test,
y=gene_info_list,
by.x = "ENSEMBL", by.y="ensembl_gene_id",
all.x=T)
}
# print tsv-tables:
for (contrast in colnames(contrast_matrix)) {
all_genes_test_full_info[[contrast]] %>% write_tsv(file=paste0(data_dir, contrast,"_DGE_analysis.tsv"))
}
all_genes_test_P_values <- list()
for (contrast in colnames(contrast_matrix)) {
all_genes_test_P_values[[contrast]] <- edgeR_tester(contrast_matrix = contrast_matrix, contrast=contrast, efit = fit)$PValue
}
all_genes_test_P_values
all_genes_test_P_values
all_genes_test <- list()
for (contrast in colnames(contrast_matrix)) {
all_genes_test[[contrast]] <- edgeR_tester(contrast_matrix = contrast_matrix, contrast=contrast, efit = fit)
}
all_genes_test
all_genes_test %>% bind_rows()
all_genes_test %>% bind_rows()
sig_genes <- all_genes_test %>%
bind_rows() %>%
dplyr::filter(PValue<0.1) %>%
pull(ENSEMBL) %>%
unique()
sig_genes
rownames(y)
non_sig_genes <- diff(rownames(y), sig_genes)
sig_genes
rownames(y)
non_sig_genes <- diff(rownames(y), sig_genes)
non_sig_genes <- setdiff(rownames(y), sig_genes)
non_sig_genes
set <- newSeqExpressionSet(y$counts)
set <- betweenLaneNormalization(set, which="upper")
empirical <- rownames(set)[ rownames(set) %in% not_sig_genes ]
empirical <- rownames(set)[ rownames(set) %in% non_sig_genes ]
emirical
empirical
set <- RUVg(set, non_sig_genes, k=5)
set <- newSeqExpressionSet(y$counts)
set <- RUVg(set, non_sig_genes, k=5)
set
set
Counts(set)
counts(set)
set <- RUVg(x = set, cIdx=non_sig_genes, k=5)
set <- newSeqExpressionSet(y$counts)
set <- betweenLaneNormalization(set, which="upper")
set <- RUVg(x = set, cIdx=non_sig_genes, k=5)
pdat <- pData(set)
y$samples <- cbind(y$samples, pdat)
design <- model.matrix(~0 + group + W_1 + W_2 + W_3 + W_4 + W_5, data=y$samples)
y <- calcNormFactors(y)
y <- estimateDisp(y, design = design)
y <- estimateDisp(y, design = design)
fit <- glmQLFit(y, design = y$design, robust = TRUE)
contrast_matrix <- makeContrasts(PHOX2B_vs_EV_proliferation=groupPHOX2Bproliferation-groupEVproliferation,
PTPRK_vs_EV_proliferation=groupPTPRKproliferation-groupEVproliferation,
PHOX2B_vs_EV_differentiation=groupPHOX2Bdifferentiation-groupEVdifferentiation,
PTPRK_vs_EV_differentiation=groupPTPRKdifferentiation-groupEVdifferentiation,
levels=design)
for (contrast in colnames(contrast_matrix)) {
all_genes_test <- edgeR_tester(contrast_matrix = contrast_matrix, contrast=contrast, efit = fit)
all_genes_test_full_info[[contrast]] <-  merge(x=all_genes_test,
y=gene_info_list,
by.x = "ENSEMBL", by.y="ensembl_gene_id",
all.x=T)
}
design <- model.matrix(~0 + group + W_1 + W_2 + W_3 + W_4 + W_5, data=y$samples)
y <- calcNormFactors(y)
y <- estimateDisp(y, design = design)
fit <- glmQLFit(y, design = y$design, robust = TRUE)
contrast_matrix <- makeContrasts(PHOX2B_vs_EV_proliferation=groupPHOX2Bproliferation-groupEVproliferation,
PTPRK_vs_EV_proliferation=groupPTPRKproliferation-groupEVproliferation,
PHOX2B_vs_EV_differentiation=groupPHOX2Bdifferentiation-groupEVdifferentiation,
PTPRK_vs_EV_differentiation=groupPTPRKdifferentiation-groupEVdifferentiation,
levels=design)
for (contrast in colnames(contrast_matrix)) {
all_genes_test <- edgeR_tester(contrast_matrix = contrast_matrix, contrast=contrast, efit = fit)
all_genes_test_full_info[[contrast]] <-  merge(x=all_genes_test,
y=gene_info_list,
by.x = "ENSEMBL", by.y="ensembl_gene_id",
all.x=T)
}
# print tsv-tables:
for (contrast in colnames(contrast_matrix)) {
all_genes_test_full_info[[contrast]] %>% write_tsv(file=paste0(data_dir, contrast,"_DGE_analysis.tsv"))
all_genes_test_full_info[[contrast]] %>% write_tsv(file=paste0(data_dir, contrast,"_DGE_analysis.tsv")) }
all_genes_test_full_info[[contrast]] %>% write_tsv(file=paste0(data_dir, contrast,"_DGE_analysis.tsv")) }
# print tsv-tables:
for (contrast in colnames(contrast_matrix)) {
all_genes_test_full_info[[contrast]] %>% write_tsv(file=paste0(data_dir, contrast,"_DGE_analysis.tsv"))
}
GO_terms <- get_enrichment_terms(org_db = org.Mm.eg.db, ensembl_ids = rownames(y),
min_genes = 5, max_genes = 500)$BP
ontology_tests <- run_ontology_tests(GO_terms,
y,
contrast_matrix = contrast_matrix,
fun=limma::camera)
for (contrast in colnames(contrast_matrix)) {
ontology_tests[[contrast]] %>% write_tsv(file=paste0(data_dir, contrast,"_GO_analysis.tsv"))
}
annotation_col_df <-  dplyr::select(meta_data_sheet, gRNA, Extraction)
rownames(annotation_col_df) <- meta_data_sheet$Sample.ID
annotation_row_df <-  dplyr::select(meta_data_sheet, Media)
rownames(annotation_row_df) <- meta_data_sheet$Sample.ID
plot_sample_heatmap(log_cpm,
method="MDS",
labels_col = meta_data_sheet$Sample.ID,
labels_row = meta_data_sheet$Sample.ID,
annotation_col = annotation_col_df[c("gRNA", "Extraction")],
annotation_row = annotation_row_df["Media"],
display_numbers=T,
fontsize_number=6,
main="Multiple dimensional scaling (MDS) heatmap"
)
ggplot_mds(y = y,
dim_plot = c(1,2),
size=1,
colour_by = y$samples$Media) +
ggtitle("MDS-plot colored by Media (Dimensions 1 & 2)") +
aes(label = rownames(y$samples)) +
geom_label_repel()
ggplot_mds(y = y,
dim_plot = c(1,2),
size=1,
colour_by = y$samples$Media) +
ggtitle("MDS-plot colored by Media (Dimensions 1 & 2)") +
aes(label = rownames(y$samples)) +
geom_label_repel()
ggplot_mds(y = y,
dim_plot = c(1,2),
size=1,
colour_by = y$samples$Media) +
ggtitle("MDS-plot colored by Media (Dimensions 1 & 2)") +
aes(label = rownames(y$samples)) +
geom_label_repel()
y
ggplot_mds(y = y,
dim_plot = c(3,4),
size=1,
colour_by = y$samples$Media) +
ggtitle("MDS-plot colored by Media (Dimensions 3 & 4)") +
aes(label = rownames(y$samples)) +
geom_label_repel()
rlang::last_error()
annotation_col_df <-  dplyr::select(meta_data_sheet, gRNA, Extraction)
annotation_col_df <-  dplyr::select(meta_data_sheet, gRNA, Extraction)
rownames(annotation_col_df) <- meta_data_sheet$Sample.ID
annotation_row_df <-  dplyr::select(meta_data_sheet, Media)
rownames(annotation_row_df) <- meta_data_sheet$Sample.ID
plot_sample_heatmap(log_cpm,
method="MDS",
labels_col = meta_data_sheet$Sample.ID,
labels_row = meta_data_sheet$Sample.ID,
annotation_col = annotation_col_df[c("gRNA", "Extraction")],
annotation_row = annotation_row_df["Media"],
display_numbers=T,
fontsize_number=6,
main="Multiple dimensional scaling (MDS) heatmap"
)
ggplot_mds(y = y,
dim_plot = c(1,2),
size=1,
colour_by = y$samples$Media) +
ggtitle("MDS-plot colored by Media (Dimensions 1 & 2)") +
aes(label = rownames(y$samples)) +
geom_label_repel()
design
contrast_matrix
design
# fix sample IDS in meta data sheet
meta_data_sheet <- readxl::read_excel("0177_metadata.xlsx") %>%
transmute(`Sample.ID`=sub(pattern = ".....", replacement = "", x=`Sample ID (Library ID)`),
gRNA = factor(gsub(x = Condition1, pattern = "g|gRNA_", replacement = ""), levels=c("EV", "PTPRK", "PHOX2B")),
Media = factor(gsub(x = Condition2, pattern = "_media", replacement = ""), levels=c("proliferation","differentiation")),
Extraction=factor(`Extraction pool (A,B,C)`, levels=c("A", "B", "C", "D", "E")),
Replicate=factor(gsub(`Condition 3`, pattern="replicate_", replacement = ""), levels=c("1","2","3")),
Observed_batch=factor(Comments)) %>%
as.data.frame()
meta_data_sheet
#Create DGE list of relevant samples
rna_counts <- rna_counts_all[, as.character(c(1:18))]
y <- DGEList(rna_counts,
group = Observed_batch),
y <- DGEList(rna_counts,
group = Observed_batch,
samples=meta_data_sheet)
y <- DGEList(rna_counts,
group = meta_data_sheet$Observed_batch,
samples=meta_data_sheet)
design <-  model.matrix(~0 + group, data=y$samples)
design
?plot_sample_heatmap
plot_sample_heatmap(log_cpm,
method="MDS",
labels_col = meta_data_sheet$Sample.ID,
labels_row = meta_data_sheet$Sample.ID,
annotation_col = annotation_col_df[c("gRNA", "Extraction")],
annotation_row = annotation_row_df["Media"],
display_numbers=T,
fontsize_number=6,
main="Multiple dimensional scaling (MDS) heatmap")
plot_sample_heatmap(log_cpm,
method="poisson",
labels_col = meta_data_sheet$Sample.ID,
labels_row = meta_data_sheet$Sample.ID,
annotation_col = annotation_col_df[c("gRNA", "Extraction")],
annotation_row = annotation_row_df["Media"],
display_numbers=T,
fontsize_number=6,
main="Poisson heatmap")
log_cpm
suppressPackageStartupMessages({
library('biomaRt') # downloading gene data
library("DT") # for pretty printing of paged tables
library("limma") # RNA-seq analysis
library("edgeR") # RNA-seq analysis
library("DESeq2") # RNA-seq analysis
library("here") # Better structure and relative paths
library("GO.db") # downloading gene data
library("org.Mm.eg.db")
library("cbmr") # in-house convenience functions
library("AnnotationDbi")
library("ggrepel")
# library("sva")
# library("DESeq2")
library("RUVSeq")
library("tidyverse") # general data manipulation
})
full_script_name <- rstudioapi::getSourceEditorContext()$path
script_name <- basename(full_script_name)
data_dir <- paste0(tools::file_path_sans_ext(full_script_name),"_data/")
dir.create(data_dir, showWarnings = F)
# load data
g_counts_raw <- readRDS("../data-raw/salmon.merged.gene_counts.rds")
rna_counts_all <- g_counts_raw %>% assays() %>% .$counts
# fix sample IDS in count matrix
colnames(rna_counts_all) <-
sub(pattern = "X[0-9]{4}_", replacement = "", x = colnames(rna_counts_all)) %>%
sub(pattern = "_S[0-9]{1,2}", replacement = "", x=.)
# fix sample IDS in meta data sheet
meta_data_sheet <- readxl::read_excel("0177_metadata.xlsx") %>%
transmute(`Sample.ID`=sub(pattern = ".....", replacement = "", x=`Sample ID (Library ID)`),
gRNA = factor(gsub(x = Condition1, pattern = "g|gRNA_", replacement = ""), levels=c("EV", "PTPRK", "PHOX2B")),
Media = factor(gsub(x = Condition2, pattern = "_media", replacement = ""), levels=c("proliferation","differentiation")),
Extraction=factor(`Extraction pool (A,B,C)`, levels=c("A", "B", "C", "D", "E")),
Replicate=factor(gsub(`Condition 3`, pattern="replicate_", replacement = ""), levels=c("1","2","3"))) %>%
as.data.frame()
#Create DGE list of relevant samples
rna_counts <- rna_counts_all[, as.character(c(1:18))]
y <- DGEList(rna_counts,
group = factor(paste0(meta_data_sheet$gRNA, meta_data_sheet$Media)),
samples=meta_data_sheet)
design <-  model.matrix(~0 + group, data=y$samples)
contrast_matrix <- makeContrasts(PHOX2B_vs_EV_proliferation=groupPHOX2Bproliferation-groupEVproliferation,
PTPRK_vs_EV_proliferation=groupPTPRKproliferation-groupEVproliferation,
PHOX2B_vs_EV_differentiation=groupPHOX2Bdifferentiation-groupEVdifferentiation,
PTPRK_vs_EV_differentiation=groupPTPRKdifferentiation-groupEVdifferentiation,
levels=design)
idx_expressed <- filterByExpr(y, design = design)
y <- y[idx_expressed, ]
y <- calcNormFactors(y)
# Calculate CPM and print
log_cpm <- cpm(y, log=T)
saveRDS(object =log_cpm, file=paste0(data_dir,
"log_CPM_values_ensembl_ID_by_sample.RDS"))
write_tsv(x = as.data.frame(log_cpm),
file=paste0(data_dir, "log_CPM_values_ensembl_ID_by_sample.tsv"))
plot_sample_heatmap(log_cpm,
method="MDS",
labels_col = meta_data_sheet$Sample.ID,
labels_row = meta_data_sheet$Sample.ID,
annotation_col = annotation_col_df[c("gRNA", "Extraction")],
annotation_row = annotation_row_df["Media"],
display_numbers=T,
fontsize_number=6,
main="Multiple dimensional scaling (MDS) heatmap")
plot_sample_heatmap(log_cpm,
method="poisson",
labels_col = meta_data_sheet$Sample.ID,
labels_row = meta_data_sheet$Sample.ID,
annotation_col = annotation_col_df[c("gRNA", "Extraction")],
annotation_row = annotation_row_df["Media"],
display_numbers=T,
fontsize_number=6,
main="Poisson heatmap")
plot_sample_heatmap(y$counts,
method="poisson",
labels_col = meta_data_sheet$Sample.ID,
labels_row = meta_data_sheet$Sample.ID,
annotation_col = annotation_col_df[c("gRNA", "Extraction")],
annotation_row = annotation_row_df["Media"],
display_numbers=T,
fontsize_number=6,
main="Poisson heatmap")
plot_sample_heatmap(y$counts,
method="poisson",
labels_col = meta_data_sheet$Sample.ID,
labels_row = meta_data_sheet$Sample.ID,
annotation_col = annotation_col_df[c("gRNA", "Extraction")],
annotation_row = annotation_row_df["Media"],
display_numbers=T,
fontsize_number=6,
log = T,
cpm=T,
main="Poisson heatmap")
log_cpm
plot_sample_heatmap(log_cpm,
method="MDS",
labels_col = meta_data_sheet$Sample.ID,
labels_row = meta_data_sheet$Sample.ID,
annotation_col = annotation_col_df[c("gRNA", "Extraction")],
annotation_row = annotation_row_df["Media"],
display_numbers=T,
fontsize_number=6,
main="Multiple dimensional scaling (MDS) heatmap")
plot_sample_heatmap(y$counts,
method="poisson",
labels_col = meta_data_sheet$Sample.ID,
labels_row = meta_data_sheet$Sample.ID,
annotation_col = annotation_col_df[c("gRNA", "Extraction")],
annotation_row = annotation_row_df["Media"],
display_numbers=T,
fontsize_number=6,
log = T,
cpm=T,
main="Poisson heatmap")
# load data
g_counts_raw <- readRDS("../data-raw/salmon.merged.gene_counts.rds")
rna_counts_all <- g_counts_raw %>% assays() %>% .$counts
# fix sample IDS in count matrix
colnames(rna_counts_all) <-
sub(pattern = "X[0-9]{4}_", replacement = "", x = colnames(rna_counts_all)) %>%
sub(pattern = "_S[0-9]{1,2}", replacement = "", x=.)
# fix sample IDS in meta data sheet
meta_data_sheet <- readxl::read_excel("0177_metadata.xlsx") %>%
transmute(`Sample.ID`=sub(pattern = ".....", replacement = "", x=`Sample ID (Library ID)`),
gRNA = factor(gsub(x = Condition1, pattern = "g|gRNA_", replacement = ""), levels=c("EV", "PTPRK", "PHOX2B")),
Media = factor(gsub(x = Condition2, pattern = "_media", replacement = ""), levels=c("proliferation","differentiation")),
Extraction=factor(`Extraction pool (A,B,C)`, levels=c("A", "B", "C", "D", "E")),
Replicate=factor(gsub(`Condition 3`, pattern="replicate_", replacement = ""), levels=c("1","2","3")),
Observed_batch=factor(Comments)) %>%
as.data.frame()
#Create DGE list of relevant samples
rna_counts <- rna_counts_all[, as.character(c(1:18))]
y <- DGEList(rna_counts,
group = meta_data_sheet$Observed_batch,
samples=meta_data_sheet)
design <-  model.matrix(~0 + group +Media:gRNA, data=y$samples)
idx_expressed <- filterByExpr(y, design = design)
y <- y[idx_expressed, ]
y <- calcNormFactors(y)
# Calculate CPM and print
log_cpm <- cpm(y, log=T)
saveRDS(object =log_cpm, file=paste0(data_dir,
"log_CPM_values_ensembl_ID_by_sample.RDS"))
write_tsv(x = as.data.frame(log_cpm),
file=paste0(data_dir, "log_CPM_values_ensembl_ID_by_sample.tsv"))
design
design <-  model.matrix(~0 + group +Media*gRNA, data=y$samples)
design
design
colnames(design) <- str_replace(string = colnames(design), pattern = ":", replacement = "")
design
colnames(design) <- str_replace(string = colnames(design), pattern = ":", replacement = "_")
